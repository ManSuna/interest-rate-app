import React, { useState } from 'react';
import { Formik, Form, Field } from 'formik';
import { Select, MenuItem, InputLabel, FormControl, FormHelperText, Button } from '@mui/material';

const dateRanges = [
  { id: 1, startDate: '2025/04/25', endDate: '2025/04/29' },
  { id: 2, startDate: '2025/04/30', endDate: '2025/05/08' },
  { id: 3, startDate: '2025/05/09', endDate: '2025/05/22' },
];

function InterestRateCycleForm() {
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  const handleDateChange = (event, setFieldValue, fieldName) => {
    const selectedDate = event.target.value;
    const selectedRange = dateRanges.find(
      (range) => range.startDate === selectedDate || range.endDate === selectedDate
    );

    if (fieldName === 'startDate') {
      setStartDate(selectedDate);
      setEndDate(selectedRange ? selectedRange.endDate : '');
      setFieldValue('startDate', selectedDate);
      setFieldValue('endDate', selectedRange ? selectedRange.endDate : '');
    } else {
      setEndDate(selectedDate);
      setStartDate(selectedRange ? selectedRange.startDate : '');
      setFieldValue('endDate', selectedDate);
      setFieldValue('startDate', selectedRange ? selectedRange.startDate : '');
    }
  };

  return (
    <Formik
      initialValues={{
        startDate: '',
        endDate: '',
        interestPaymentAmount: '',
      }}
      onSubmit={(values) => {
        console.log(values);
      }}
    >
      {({ values, touched, errors, handleChange, handleBlur, setFieldValue }) => (
        <Form>
          <FormControl fullWidth error={touched.startDate && Boolean(errors.startDate)}>
            <InputLabel>Start Date</InputLabel>
            <Field
              name="startDate"
              as={Select}
              value={values.startDate}
              onChange={(e) => handleDateChange(e, setFieldValue, 'startDate')}
              onBlur={handleBlur}
              label="Start Date"
            >
              {dateRanges.map((range) => (
                <MenuItem key={range.id} value={range.startDate}>
                  {range.startDate}
                </MenuItem>
              ))}
            </Field>
            {touched.startDate && errors.startDate && (
              <FormHelperText>{errors.startDate}</FormHelperText>
            )}
          </FormControl>

          <FormControl fullWidth error={touched.endDate && Boolean(errors.endDate)}>
            <InputLabel>End Date</InputLabel>
            <Field
              name="endDate"
              as={Select}
              value={values.endDate}
              onChange={(e) => handleDateChange(e, setFieldValue, 'endDate')}
              onBlur={handleBlur}
              label="End Date"
            >
              {dateRanges.map((range) => (
                <MenuItem key={range.id} value={range.endDate}>
                  {range.endDate}
                </MenuItem>
              ))}
            </Field>
            {touched.endDate && errors.endDate && (
              <FormHelperText>{errors.endDate}</FormHelperText>
            )}
          </FormControl>

          <FormControl fullWidth error={touched.interestPaymentAmount && Boolean(errors.interestPaymentAmount)}>
            <InputLabel>Interest Payment Amount</InputLabel>
            <Field
              name="interestPaymentAmount"
              as="input"
              type="number"
              value={values.interestPaymentAmount}
              onChange={handleChange}
              onBlur={handleBlur}
            />
            {touched.interestPaymentAmount && errors.interestPaymentAmount && (
              <FormHelperText>{errors.interestPaymentAmount}</FormHelperText>
            )}
          </FormControl>

          <Button type="submit" variant="contained" color="primary">
            Submit
          </Button>
        </Form>
      )}
    </Formik>
  );
}

export default InterestRateCycleForm;
