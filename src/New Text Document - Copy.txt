import React, { useState } from 'react';
import { Formik, Field, Form } from 'formik';
import * as Yup from 'yup';

const MyComponent = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Unified function for both "Download" and "Download Reports" button clicks
  const handleDownloadRequest = async (type, values) => {
    setLoading(true);
    setError(null); // Clear previous errors

    const endpoint = type === 'download' ? 'https://api.example.com/download' : 'https://api.example.com/download-reports';
    const fileName = type === 'download' ? 'downloaded_file.txt' : 'reports.zip';

    try {
      // Make the GET request with selected form values if needed
      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          // You can pass values in headers or query params if needed, for example:
          'selectedValue': values.selectedOption || 'default', // Pass the selected value
        },
      });

      if (!response.ok) {
        throw new Error('Failed to download data');
      }

      const fileBlob = await response.blob();
      const link = document.createElement('a');
      link.href = URL.createObjectURL(fileBlob);
      link.download = fileName;
      link.click();
    } catch (err) {
      setError(err.message);
      console.error('Download error:', err);
    } finally {
      setLoading(false);
    }
  };

  // Formik form submission handler
  const handleSubmit = (values) => {
    console.log('Form submitted with values:', values);
  };

  return (
    <Formik
      initialValues={{
        name: '',
        email: '',
        selectedOption: '', // New field to track selected value
      }}
      validationSchema={Yup.object({
        name: Yup.string().required('Name is required'),
        email: Yup.string().email('Invalid email address').required('Email is required'),
        selectedOption: Yup.string().required('Please select an option'),
      })}
      onSubmit={handleSubmit}
    >
      {({ values, isSubmitting }) => (
        <Form>
          <div>
            <label htmlFor="name">Name</label>
            <Field type="text" id="name" name="name" />
          </div>

          <div>
            <label htmlFor="email">Email</label>
            <Field type="email" id="email" name="email" />
          </div>

          <div>
            <label htmlFor="selectedOption">Select Option</label>
            <Field as="select" id="selectedOption" name="selectedOption">
              <option value="">Select...</option>
              <option value="option1">Option 1</option>
              <option value="option2">Option 2</option>
            </Field>
          </div>

          <div>
            <button type="submit" disabled={isSubmitting || loading}>
              Submit
            </button>
          </div>

          <div>
            <button
              type="button"
              onClick={() => handleDownloadRequest('download', values)}
              disabled={loading || isSubmitting}
            >
              Download
            </button>
            <button
              type="button"
              onClick={() => handleDownloadRequest('downloadReports', values)}
              disabled={loading || isSubmitting}
            >
              Download Reports
            </button>
          </div>

          {error && <p style={{ color: 'red' }}>{error}</p>}
          {loading && <p>Loading...</p>}
        </Form>
      )}
    </Formik>
  );
};

export default MyComponent;
